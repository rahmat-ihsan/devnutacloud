<?php

/**
 * Created by PhpStorm.
 * User: Husnan
 * Date: 16/05/2016
 * Time: 17:35
 */
class produk extends MY_Controller
{

    var $DevIDAtauIDPerusahaan = '';

    function __construct()
    {
        parent::__construct();
        ifNotAuthenticatedRedirectToLogin();
        $this->load->library('NutaQuery');
        $this->load->model('Userperusahaancabang');
        $devid = getLoggedInUserID();
        $queryStr = "SELECT PerusahaanNo FROM perusahaan p WHERE p.PerusahaanID= " . $this->db->escape($devid);
        $queryNo = $this->db->query($queryStr);
        $result = $queryNo->result();
        $noperusahaan = 1;
        if (count($result) >= 0) {
            $noperusahaan = $result[0]->PerusahaanNo;
        }
        $this->nutaquery->setDeviceID(getLoggedInRegisterWithDeviceID());
        $this->DevIDAtauIDPerusahaan = $devid;
        $this->nutaquery->setPerusahaaanID($this->DevIDAtauIDPerusahaan, $noperusahaan);
        $cabangs = $this->Userperusahaancabang->getListCabang(getLoggedInUsername(), $this->DevIDAtauIDPerusahaan);
        $this->nutaquery->setCabangs($cabangs);
        $this->load->library('CurrencyFormatter');
        $this->load->helper('nuta_helper');
//}
    }

    public function index()
    {
        $availableOutlets = $this->GetOutletTanpaSemua();
        if (count($availableOutlets) > 1) {
            $this->nutaquery->SetOutlet(-999);
        } else {
            $this->setDefaultOutletId($availableOutlets);
        }
        $selected_outlet = $this->input->get('outlet');
        if (isNotEmpty($selected_outlet)) {
            $this->nutaquery->SetOutlet($selected_outlet);
        } else if (count($availableOutlets) == 1) {
            $this->nutaquery->SetOutlet($this->default_outlet_id);
        }
        $query_master_item = $this->nutaquery->get_query_daftar_produk(getPerusahaanNo());
        $query = $this->db->query($query_master_item);
        $result = $query->result();
        $fields = $query->field_data();
        $outletids = array();
        foreach ($availableOutlets as $k => $v) {
            array_push($outletids, $k);
        }
        $data['outletids'] = $outletids;

        $data['outlets'] = $availableOutlets;
        $data['selected_outlet'] = $this->nutaquery->getOutlet();
        $data['page_part'] = 'webparts/list_produk';
        $data['js_part'] = array(
            "webparts/parts/js_socket",
            "webparts/parts/js_form",
            'webparts/parts/js_grid_item',
            'webparts/parts/js_datatable',
            'webparts/parts/js_produk',
            'webparts/parts/js_dialog_hapus_item');
        $data['js_chart'] = array();
        $data['datagrid'] = array('fields' => $fields, 'result' => $result);
        $data['visibilityMenu'] = $this->visibilityMenu;
        $data['isLaporanPembelianVisible'] = $this->IsLaporanPembelianVisible();
        $data['isLaporanStokVisible'] = $this->IsLaporanStokVisible();
        $data['isLaporanPembelianVisible'] = $this->IsLaporanPembelianVisible();
        $data['isLaporanPriceVarianVisible'] = $this->IsLaporanVarianHargaVisible();
        $data['menu'] = "produk";
        $this->load->view('main_part', $data);
    }

    public function itemform()
    {

        $availableOutlets = $this->GetOutletTanpaSemua();
        $this->setDefaultOutletId($availableOutlets);
        $selected_outlet = $this->input->get('outlet');

        if (isNotEmpty($selected_outlet)) {
            $this->nutaquery->setOutlet($selected_outlet);
        }
        $this->load->model('masteritem');
        $this->load->model('Satuan');
        $this->load->model('Kategori');
        $this->load->model('Mastervarian');
        $this->load->model('Perusahaanmodel');
        $list_kategori = $this->Kategori->getDaftarKategori($this->nutaquery->getOutlet());
        $list_satuan = $this->Satuan->getDaftarSatuan($this->nutaquery->getOutlet());
        $list_variasi_harga = [];
        // $list_variasi_harga = [
        //     ['VarianName' => 'Reguler', 'SellPrice' => 0, 'IsReguler' => 1, 'Placeholder' => 'Reguler'],
        //     ['VarianName' => '', 'SellPrice' => 0, 'IsReguler' => 0, 'Placeholder' => 'misal: Cup Ukuran Kecil'],
        //     ['VarianName' => '', 'SellPrice' => 0, 'IsReguler' => 0, 'Placeholder' => 'misal: Cup Ukuran Besar']
        // ];
        $pilihan_ekstra = [
            'NamaPilihanEkstra' => '',
            'PlaceholderPilihan' => 'Misal: Toping',
            'HanyaBisaPilihSatu' => 'false',
            'BisaMenambahJumlahPerPilihan' => 'false',
            'Pilihan' => [
                ['NamaPilihan' => '', 'Harga' => 0, 'QtyDibutuhkan' => 0, 'Satuan' => '', 'PlaceholderPilihan' => 'misal: Keju'],
                ['NamaPilihan' => '', 'Harga' => 0, 'QtyDibutuhkan' => 0, 'Satuan' => '', 'PlaceholderPilihan' => 'misal: Coklat'],
                ['NamaPilihan' => '', 'Harga' => 0, 'QtyDibutuhkan' => 0, 'Satuan' => '', 'PlaceholderPilihan' => 'misal: Kacang']
            ]
        ];

        $this->load->model('Mastermodifier');
        $list_pilihan_ekstra = $this->Mastermodifier->getModifier($this->nutaquery->getOutlet());
        $index = 0;
        foreach ($list_pilihan_ekstra as $ekstra) {
            $pilihans = $this->Mastermodifier->getPilihan($ekstra['ModifierID'] . "." . $ekstra['DeviceNo'], $this->nutaquery->getOutlet());
            if ($ekstra['CanAddQuantity'] == 1) {
                $y = 0;
                foreach ($pilihans as $pilihan) {
                    $itempilihan = $this->masteritem->getByName($pilihan['NamaPilihan'], $this->nutaquery->getOutlet());
                    $pilihans[$y]['Satuan'] = isset($itempilihan) ? $itempilihan->Unit : '';
                    $y++;
                }
                $y = 0;
            }
            $list_pilihan_ekstra[$index]['Pilihan'] = $pilihans;
            $index++;
        }
        $namaitem = $this->input->get('id');
        $mode = isNotEmpty($namaitem) ? 'edit' : 'new';
        $item_name = '';
        $kategori = '';
        $satuan = '';
        $harga_jual = '';
        $harga_beli = '';
        $is_produk_bahan = '';
        $is_punya_bahan = '';
        $urlfoto = '';
        $bahans = array();
        $autocompletebahan = $this->masteritem->getAutocompleteBahan($this->nutaquery->getOutlet());

        if ($mode == 'edit') {
            //Outletnya sesuai item
            $outletsByItem = $this->FilterOutletWithItem($availableOutlets, $namaitem);
            if (isNotEmpty($selected_outlet)) {
                $this->nutaquery->setOutlet($selected_outlet);
            } else {
                $this->setDefaultOutletId($availableOutlets);
            }

            $item = $this->masteritem->getByName($namaitem, $this->nutaquery->getOutlet());
            $iditem = $item->ItemID . "." . $item->DeviceNo;
            $item_name = $item->ItemName;
            $kategori = $item->CategoryID . "." . $item->CategoryDeviceNo;
            $harga_jual = $item->SellPrice;
            $harga_beli = $item->PurchasePrice;
            $is_produk_bahan = $item->IsProduct;
            $is_punya_bahan = $item->IsProductHasIngredients;
            $satuan = $item->Unit;
            $variasi_harga_di_database = $this->Mastervarian->getVariasiHarga($iditem, $this->nutaquery->getOutlet());
            //$list_variasi_harga[0]['SellPrice'] = $harga_jual;
            if (count($variasi_harga_di_database) > 0) {
                $list_variasi_harga = $variasi_harga_di_database;
            }
            $urlfoto = base_url('images/no-image-with-text.png');
            if (isNotEmpty($item->OnlineImagePath)) {
                $urlfoto = $this->config->item('ws_base_url') . $item->OnlineImagePath;
            }
            //load bahan
            $str_query_bahan = $this->nutaquery->get_query_bahan_item($iditem);
            $query_bahan = $this->db->query($str_query_bahan); 
            $bahans = $query_bahan->result();
            $data['iditem'] = $iditem;
            $linkedModifiers = $this->masteritem->getModifiersItem($iditem, $this->nutaquery->getOutlet());
            $index = 0;
            foreach ($list_pilihan_ekstra as $e) {

                foreach ($linkedModifiers as $d) {
                    if ($e['ModifierID'] == $d->ModifierID) {
                        $list_pilihan_ekstra[$index]['Selected'] = true;
                        break;
                    }
                }
                $index++;
            }
        }
        $outletids = array();
        foreach ($availableOutlets as $k => $v) {
            array_push($outletids, $k);
        }
        $data['outletids'] = $outletids;


        $data['ws_host'] = $this->config->item('ws_base_url');
        $data['urlfoto'] = $urlfoto;
        $data['autocompletebahan'] = $autocompletebahan;
        $data['form']['nama item'] = $item_name;
        $data['form']['kategori'] = $kategori;
        $data['form']['satuan'] = $satuan;
        $data['form']['harga jual'] = $harga_jual;
        $data['form']['harga beli'] = $harga_beli;
        $data['form']['jenis item'] = $is_produk_bahan;
        $data['form']['punya bahan'] = $is_punya_bahan;
        $data['form']['bahans'] = $bahans;
        $data['outlets'] = $availableOutlets;
        $data['outlets_by_item'] = isset($outletsByItem) ? $outletsByItem : $availableOutlets;

        $data['modeform'] = $mode;
        $data['kategories'] = $list_kategori;
        $data['satuans'] = $list_satuan;
        $data['variasi_harga'] = $list_variasi_harga;
        $data['pilihan_ekstra'] = $pilihan_ekstra;
        $data['list_pilihan_ekstra'] = $list_pilihan_ekstra;
        $data['selected_outlet'] = $this->nutaquery->getOutlet();
        $data['page_part'] = 'webparts/form_produk';
        $data['js_part'] = array(
            'webparts/parts/js_socket',
            'webparts/parts/js_ajax_switch',
            'webparts/parts/js_form',
            'webparts/parts/js_form_validation',
            'webparts/parts/js_grid_item',
            'webparts/parts/js_datatable',
            'webparts/parts/js_dialog_kategori',
            'webparts/parts/js_dialog_satuan',
            'webparts/parts/js_dialog_hapus_kategori',
            'webparts/parts/js_dialog_hapus_item',
            'webparts/parts/js_form_produk',
            'webparts/parts/js_dialog_simpan_beberapa_outlet',
            'webparts/parts/js_dialog_hapus_satuan',
            'webparts/parts/js_dialog_variasi_harga',
            'webparts/parts/js_dialog_pilihan_ekstra',
        );
        $data['js_chart'] = array();
        $data['datagrid'] = array('fields' => array('Foto', 'Item', 'Kategori', 'Satuan', 'Harga Jual', 'Ada Bahan'));
        $data['visibilityMenu'] = $this->visibilityMenu;
        $data['isLaporanPembelianVisible'] = $this->IsLaporanPembelianVisible();
        $data['isLaporanStokVisible'] = $this->IsLaporanStokVisible();
        $data['isLaporanPriceVarianVisible'] = $this->IsLaporanVarianHargaVisible();
        $data['isLaporanStokVisible'] = $this->IsLaporanStokVisible();

        $query_option = $this->db->query($this->nutaquery->get_query_modul_outlet());
        $option = $query_option->row();
        $data['option'] = $option;
        $this->load->view('main_part', $data);
    }

    public function tesmodifier()
    {
        $this->load->model('Mastermodifier');
        $this->Mastermodifier->tesmodifier('Topping', 2678);
    }

    public function import() {
        $availableOutlets = $this->GetOutletTanpaSemua();
        if (count($availableOutlets) > 1) {
            $this->nutaquery->SetOutlet(-999);
        } else {
            $this->setDefaultOutletId($availableOutlets);
        }
        $selected_outlet = $this->input->get('outlet');
        if (isNotEmpty($selected_outlet)) {
            $this->nutaquery->SetOutlet($selected_outlet);
        } else if (count($availableOutlets) == 1) {
            $this->nutaquery->SetOutlet($this->default_outlet_id);
        }

        $data['outlets'] = $availableOutlets;
        $data['selected_outlet'] = $this->nutaquery->getOutlet();

        $data['page_part'] = 'webparts/import_produk';
        $data['js_part'] = array();
        $data['js_chart'] = array();

        $data['visibilityMenu'] = $this->visibilityMenu;
        $data['isLaporanPembelianVisible'] = $this->IsLaporanPembelianVisible();
        $data['isLaporanStokVisible'] = $this->IsLaporanStokVisible();
        $data['isLaporanPriceVarianVisible'] = $this->IsLaporanVarianHargaVisible();
        $data['isLaporanStokVisible'] = $this->IsLaporanStokVisible();

        $this->load->view('main_part', $data);
    }

    public function import_act() {
        $this->load->library('Excel');

        $outlet = $this->input->post('outlet');

        $tmpfile = $_FILES['fContent']['tmp_name'];

        try {
            $inputFileType = PHPExcel_IOFactory::identify($tmpfile);
            $objReader = PHPExcel_IOFactory::createReader($inputFileType);
            $objPHPExcel = $objReader->load($tmpfile);
        } catch(Exception $e) {
            die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());
        }

        $sheet = $objPHPExcel->getSheet(0); // selalu fetch data dari sheet pertama
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();

        try {
            $this->db->trans_begin();

            for ($i=2; $i<=$highestRow; $i++) {
                $rowData = $sheet->rangeToArray('A' . $i . ':' . $highestColumn . $i, NULL, TRUE, FALSE);
                $rowData = $rowData[0];

                foreach ($rowData as $key => $value) {
                    if (is_null($value)) {
                        $rowData[$key] = "";
                    }
                }

                // createCategory if not exist
                $qC = $this->db->query("SELECT CONCAT(CategoryID, '.', DeviceNo) CategoryID FROM mastercategory WHERE CategoryName = ? AND DeviceID = ? AND PerusahaanNo = ? ORDER BY DeviceNo ASC", array($rowData[2], $outlet, getPerusahaanNo()));
                if(!$qC) throw new Exception($this->db->_error_message(), $this->db->_error_number());
                $c = $qC->row_array();
                if (is_null($c["CategoryID"])) {
                    $categoryid = $this->createCategory($rowData[2], $outlet, getPerusahaanNo());
                    $c["CategoryID"] = $categoryid;
                }

                $itemid = $this->createItem($rowData[0], $rowData[1], $c["CategoryID"], $rowData[3], $outlet, getPerusahaanNo(), strtolower(trim($rowData[10])) == "produk", strtolower(trim($rowData[12])) == "ya", strlen($rowData[5]) == 0 ? 0 : $rowData[5], strlen($rowData[11]) == 0 ? 0 : $rowData[11]); 

                // variant 1
                if (strlen($rowData[4]) > 0) { 
                    $this->createVarian($itemid, $rowData[4], $rowData[5], $outlet, getPerusahaanNo(), true);
                }

                // variant 2
                if (strlen($rowData[6]) > 0) { 
                    $this->createVarian($itemid, $rowData[6], $rowData[7], $outlet, getPerusahaanNo());
                }

                // variant 3
                if (strlen($rowData[8]) > 0) { 
                    $this->createVarian($itemid, $rowData[8], $rowData[9], $outlet, getPerusahaanNo());
                }


                // ingredients
                if (strtolower(trim($rowData[12])) == "ya") {
                    $this->createIngredient($itemid, $rowData[13], $rowData[15], $rowData[14], $outlet, getPerusahaanNo(), 1);
                    $this->createIngredient($itemid, $rowData[16], $rowData[18], $rowData[17], $outlet, getPerusahaanNo(), 2);
                    $this->createIngredient($itemid, $rowData[19], $rowData[21], $rowData[20], $outlet, getPerusahaanNo(), 3);
                    $this->createIngredient($itemid, $rowData[22], $rowData[24], $rowData[23], $outlet, getPerusahaanNo(), 4);
                    $this->createIngredient($itemid, $rowData[25], $rowData[27], $rowData[26], $outlet, getPerusahaanNo(), 5);
                    $this->createIngredient($itemid, $rowData[28], $rowData[30], $rowData[29], $outlet, getPerusahaanNo(), 6);
                    $this->createIngredient($itemid, $rowData[31], $rowData[33], $rowData[32], $outlet, getPerusahaanNo(), 7);
                    $this->createIngredient($itemid, $rowData[34], $rowData[36], $rowData[35], $outlet, getPerusahaanNo(), 8);
                    $this->createIngredient($itemid, $rowData[37], $rowData[39], $rowData[38], $outlet, getPerusahaanNo(), 9);
                    $this->createIngredient($itemid, $rowData[40], $rowData[42], $rowData[41], $outlet, getPerusahaanNo(), 10);
                }

                if (strlen($rowData[43]) > 0) {
                    $details = array();

                    if (strlen($rowData[45]) > 0)
                        array_push($details, array("ChoiceName" => $rowData[45], "ChoicePrice" => strlen($rowData[46]) > 0 ? $rowData[46] : 0));
                    if (strlen($rowData[47]) > 0)
                        array_push($details, array("ChoiceName" => $rowData[47], "ChoicePrice" => strlen($rowData[48]) > 0 ? $rowData[48] : 0));
                    if (strlen($rowData[49]) > 0)
                        array_push($details, array("ChoiceName" => $rowData[49], "ChoicePrice" => strlen($rowData[50]) > 0 ? $rowData[50] : 0));

                    $this->createModifier($itemid, $rowData[43], strtolower(trim($rowData[44])) == "ya", $details, $outlet, getPerusahaanNo());
                }

                if (strlen($rowData[51]) > 0) {
                    $details = array();

                    if (strlen($rowData[53]) > 0)
                        array_push($details, array("ChoiceName" => $rowData[53], "ChoicePrice" => strlen($rowData[54]) > 0 ? $rowData[54] : 0));
                    if (strlen($rowData[55]) > 0)
                        array_push($details, array("ChoiceName" => $rowData[55], "ChoicePrice" => strlen($rowData[56]) > 0 ? $rowData[56] : 0));
                    if (strlen($rowData[57]) > 0)
                        array_push($details, array("ChoiceName" => $rowData[57], "ChoicePrice" => strlen($rowData[58]) > 0 ? $rowData[58] : 0));

                    $this->createModifier($itemid, $rowData[51], strtolower(trim($rowData[52])) == "ya", $details, $outlet, $perusahaanno);
                }
            }

            $this->db->trans_commit();
        }
        catch (Exception $e) {
            $this->db->trans_rollback();
            log_message('error', sprintf('%s : %s : DB transaction failed. Error no: %s, Error msg:%s, Last query: %s', __CLASS__, __FUNCTION__, $e->getCode(), $e->getMessage(), print_r($this->db->last_query(), TRUE)));

            echo "<h1>Cannot import anydata to Product. Please check excel again!</h1>";
        }

        redirect('produk/index');
    }

    private function createItem($itemname, $imagelink, $categoryid, $satuan, $outlet, $perusahaanno, $isproduct, $isproducthasingredients, $sellprice, $purchaseprice) {
        $this->load->model('Masteritem');

        $tmp = explode('.', $categoryid);
        $categoryid = $tmp[0];
        $categoryDeviceNo = $tmp[1];

        $deviceno = 0; // from web

        $itemid = $this->Masteritem->getMaxItemID($outlet);
        $res = $this->db->query("INSERT INTO masteritem (ItemID, ItemName, ImageLink, CategoryID, CategoryDeviceNo, Unit, DeviceID, DeviceNo, PerusahaanNo, IsDetailSaved, IsProduct, IsProductHasIngredients, SellPrice, PurchasePrice, Barcode, Stock, BeginningStock, BeginningCogs, TaxPercent, SellPriceIncludeTax, SplitPosition, OnlineImagePath, Varian) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'true', ?, ?, ?, ?, '', ?, 0, 0, 0, 'false', 1, '', 'Nuta')", array(
            $itemid,
            $itemname,
            $imagelink,
            $categoryid,
            $categoryDeviceNo,
            $satuan,
            $outlet,
            $deviceno,
            $perusahaanno,
            $isproduct ? 'true' : 'false',
            $isproducthasingredients ? 'true' : 'false',
            $sellprice,
            $purchaseprice,
            $isproducthasingredients ? 'true' : 'false'
        ));
        if(!$res) {
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
        }

        return $itemid . "." . $deviceno;
    }

    private function createCategory($categoryname, $outlet, $perusahaanno) {
        $this->load->model('Kategori');

        $deviceno = 0; // web

        $categoryid = $this->Kategori->getMaxCategoriID($outlet);
        $res = $this->db->query("INSERT INTO mastercategory (CategoryID, CategoryName, Varian, DeviceID, DeviceNo, PerusahaanNo) VALUES (?, ?, 'Nuta', ?, ?, ?)", array(
            $categoryid,
            $categoryname,
            $outlet,
            $deviceno,
            $perusahaanno
        ));
        if(!$res) {
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
        }

        return $categoryid . "." . $deviceno;
    }

    private function createVarian($id, $varianname, $sellprice, $outlet, $perusahaanno, $isreguler = false) {
        $this->load->model('Mastervarian');

        $tmp = explode('.', $id);
        $itemid = $tmp[0];
        $itemdeviceno = $tmp[1];

        $deviceno = 0; // from web

        $varianid = $this->Mastervarian->generateNewID($outlet);
        $res = $this->db->query("INSERT INTO mastervariant (VarianID, ItemID, ItemDeviceNo, VarianName, SellPrice, DeviceID, DeviceNo, PerusahaanNo, IsReguler, Varian) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'Nuta')", array(
            $varianid,
            $itemid,
            $itemdeviceno,
            $varianname,
            $sellprice,
            $outlet,
            $deviceno,
            $perusahaanno,
            $isreguler ? 1 : 0
        ));
        if(!$res) {
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
        }

        return $varianid;
    }

    private function createIngredient($id, $ingredientname, $ingredientunit, $qty, $outlet, $perusahaanno, $number) {
        $this->load->model('Masteritem');

        $tmp = explode('.', $id);
        $itemid = $tmp[0];
        $itemdeviceno = $tmp[1];

        $itemdetailingredientsid = $this->Masteritem->getMaxIngredientDetailID($outlet);

        $ingredientid = $this->createItem($ingredientname, '', '0.0', $ingredientunit, $outlet, $perusahaanno, false, false, 0, 0);
        $tmp = explode('.', $ingredientid);
        $ingredientid = $tmp[0];
        $ingredientdeviceno = $tmp[1];

        $deviceno = 0; // from web

        $res = $this->db->query("INSERT INTO masteritemdetailingredients (DetailID, ItemID, ItemDeviceNo, IngredientsID, IngredientsDeviceNo, QtyNeed, Varian, DeviceID, DeviceNo, PerusahaanNo, DetailNumber) VALUES (?, ?, ?, ?, ?, ?, 'Varian', ?, ?, ?, ?)", array(
            $itemdetailingredientsid,
            $itemid,
            $itemdeviceno,
            $ingredientid,
            $ingredientdeviceno,
            (double)$qty,
            $outlet,
            $deviceno,
            $perusahaanno,
            $number
        ));
        if(!$res) {
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
        }
    }

    private function createModifier($id, $modifiername, $chooseOnlyOne, $details, $outlet, $perusahaanno) {
        $this->load->model('Mastermodifier');
        $this->load->model('Masteritem');

        $tmp = explode('.', $id);
        $itemid = $tmp[0];
        $itemdeviceno = $tmp[1];

        $modifierid = $this->Mastermodifier->generateModifierID($outlet);
        $modifierdeviceno = 0; // from web
        $detailid = $this->Mastermodifier->generatePilihanID($outlet);
        $itemdetailmodifierid = $this->Masteritem->getMaxModifierDetailID($outlet);

        $deviceno = 0; // from web

        $res = $this->db->query("INSERT INTO mastermodifier (ModifierID, ModifierName, ChooseOneOnly, Varian, DeviceID, DeviceNo, PerusahaanNo, IsDetailsSaved) VALUES (?, ?, ?, 'Nuta', ?, ?, ?, 1)", array(
            $modifierid,
            $modifiername,
            $chooseOnlyOne ? 1 : 0,
            $outlet,
            $deviceno,
            $perusahaanno
        ));
        if(!$res) {
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
        }

        for ($i=0; $i<count($details); $i++) {
            $d = $details[$i];
            $res = $this->db->query("INSERT INTO mastermodifierdetail (DetailID, ModifierID, ModifierDeviceNo, ChoiceName, ChoicePrice, Varian, DeviceID, DeviceNo, PerusahaanNo) VALUES (?, ?, ?, ?, ?, 'Nuta', ?, ?, ?)", array(
                $detailid++,
                $modifierid,
                $modifierdeviceno,
                $d["ChoiceName"],
                $d["ChoicePrice"],
                $outlet,
                $deviceno,
                $perusahaanno
            ));
            if(!$res) {
                $db_error = $this->db->error();
                if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
            }
        }

        $res = $this->db->query("INSERT INTO masteritemdetailmodifier (DetailID, ItemID, ItemDeviceNo, ModifierID, ModifierDeviceNo, Varian, DeviceID, DeviceNo, PerusahaanNo) VALUES (?, ?, ?, ?, ?, 'Nuta', ?, ?, ?)", array(
            $itemdetailmodifierid,
            $itemid,
            $itemdeviceno,
            $modifierid,
            $modifierdeviceno,
            $outlet,
            $deviceno,
            $perusahaanno
        ));
        if(!$res) {
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
            }
        }
    }
}